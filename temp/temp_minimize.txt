boolean CONGESTION = false;
const int SENSOR_MAX_BUFFER_SIZE = 1;
const int SENSOR_MAX_QUEUE_SIZE = 1;
const int SENSOR_MAX_PROCESSING_RATE = 1;
const int SENSOR_MAX_SENDING_RATE = 1;
const int CHANNEL_MAX_BUFFER_SIZE = 1;
const int CHANNEL_MAX_SENDING_RATE = 1;
int NUMBER_OF_PACKAGE = 1;
const int SENSOR_MIN_SENDING_RATE = 1;
const int SENSOR_MIN_PROCESSING_RATE = 1;
const int CHANEL_MIN_SENDING_RATE = 1;
int Buffer_0 = 0;
int Queue_0 = 0;
float energy_0 = 1;
int Buffer_1 = 0;
int Queue_1 = 0;
float energy_1 = 1;
int Buffer_2 = 0;
int Queue_2 = 0;
float energy_2 = 1;
int Channel_Buffer_0_1 = 0;
int Channel_Buffer_1_2 = 0;
main {
search(CONGESTION);
}


source_gen {
int random = randomInt(1, NUMBER_OF_PACKAGE);
if (NUMBER_OF_PACKAGE >= random) {
NUMBER_OF_PACKAGE = NUMBER_OF_PACKAGE - random;
}
else {
random = NUMBER_OF_PACKAGE;
NUMBER_OF_PACKAGE = 0;
}Buffer_0 = Buffer_0 + random;
energy_0 = energy_0 - randomFloat(0.2, 0.3);
}


source_send {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_0 >= random) {
Buffer_0 = Buffer_0 - random;
}
else {
random = Buffer_0;
Buffer_0 = 0;
}Queue_0 = Queue_0 + random;
energy_0 = energy_0 - randomFloat(0.1, 0.2);
}


int_send_1 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_1 >= random) {
Buffer_1 = Buffer_1 - random;
}
else {
random = Buffer_1;
Buffer_1 = 0;
}Queue_1 = Queue_1 + random;
if (Queue_1 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_1 = energy_1 - randomFloat(0.1, 0.2);
}


Process {
int random = randomInt(SENSOR_MIN_PROCESSING_RATE, SENSOR_MAX_PROCESSING_RATE);
if (Buffer_2 >= random) {
Buffer_2 = Buffer_2 - random;
}
else {
random = Buffer_2;
Buffer_2 = 0;
}Queue_2 = Queue_2 + random;
energy_2 = energy_2 - randomFloat(0.1, 0.2);
}


Channel_recv_0_1 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_0 >= random) {
Queue_0 = Queue_0 - random;
}
else {
random = Queue_0;
Queue_0 = 0;
}Channel_Buffer_0_1 = Channel_Buffer_0_1 + random;
if (Channel_Buffer_0_1 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_0_1 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_0_1 >= random) {
Channel_Buffer_0_1 = Channel_Buffer_0_1 - random;
}
else {
random = Channel_Buffer_0_1;
Channel_Buffer_0_1 = 0;
}Buffer_1 = Buffer_1 + random;
if (Buffer_1 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_1_2 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_1 >= random) {
Queue_1 = Queue_1 - random;
}
else {
random = Queue_1;
Queue_1 = 0;
}Channel_Buffer_1_2 = Channel_Buffer_1_2 + random;
if (Channel_Buffer_1_2 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_1_2 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_1_2 >= random) {
Channel_Buffer_1_2 = Channel_Buffer_1_2 - random;
}
else {
random = Channel_Buffer_1_2;
Channel_Buffer_1_2 = 0;
}Buffer_2 = Buffer_2 + random;
if (Buffer_2 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


