boolean CONGESTION = false;
const int SENSOR_MAX_BUFFER_SIZE = 1;
const int SENSOR_MAX_QUEUE_SIZE = 1;
const int SENSOR_MAX_PROCESSING_RATE = 1;
const int SENSOR_MAX_SENDING_RATE = 1;
const int CHANNEL_MAX_BUFFER_SIZE = 1;
const int CHANNEL_MAX_SENDING_RATE = 1;
int NUMBER_OF_PACKAGE = 1;
const int SENSOR_MIN_SENDING_RATE = 1;
const int SENSOR_MIN_PROCESSING_RATE = 1;
const int CHANEL_MIN_SENDING_RATE = 1;
int Buffer_1 = 0;
int Queue_1 = 0;
float energy_1 = 1;
int Buffer_5 = 0;
int Queue_5 = 0;
float energy_5 = 1;
int Buffer_8 = 0;
int Queue_8 = 0;
float energy_8 = 1;
int Buffer_9 = 0;
int Queue_9 = 0;
float energy_9 = 1;
int Channel_Buffer_1_9 = 0;
int Channel_Buffer_8_9 = 0;
int Channel_Buffer_9_5 = 0;
main {
search(CONGESTION);
}


source_gen {
int random = randomInt(1, NUMBER_OF_PACKAGE);
if (NUMBER_OF_PACKAGE >= random) {
NUMBER_OF_PACKAGE = NUMBER_OF_PACKAGE - random;
}
else {
random = NUMBER_OF_PACKAGE;
NUMBER_OF_PACKAGE = 0;
}Buffer_1 = Buffer_1 + random;
energy_1 = energy_1 - randomFloat(0.2, 0.3);
}


source_send {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_1 >= random) {
Buffer_1 = Buffer_1 - random;
}
else {
random = Buffer_1;
Buffer_1 = 0;
}Queue_1 = Queue_1 + random;
energy_1 = energy_1 - randomFloat(0.1, 0.2);
}


Process {
int random = randomInt(SENSOR_MIN_PROCESSING_RATE, SENSOR_MAX_PROCESSING_RATE);
if (Buffer_5 >= random) {
Buffer_5 = Buffer_5 - random;
}
else {
random = Buffer_5;
Buffer_5 = 0;
}Queue_5 = Queue_5 + random;
energy_5 = energy_5 - randomFloat(0.1, 0.2);
}


int_send_8 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_8 >= random) {
Buffer_8 = Buffer_8 - random;
}
else {
random = Buffer_8;
Buffer_8 = 0;
}Queue_8 = Queue_8 + random;
if (Queue_8 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_8 = energy_8 - randomFloat(0.1, 0.2);
}


int_send_9 {
int random = randomInt(SENSOR_MIN_SENDING_RATE, SENSOR_MAX_SENDING_RATE);
if (Buffer_9 >= random) {
Buffer_9 = Buffer_9 - random;
}
else {
random = Buffer_9;
Buffer_9 = 0;
}Queue_9 = Queue_9 + random;
if (Queue_9 > SENSOR_MAX_QUEUE_SIZE) {
CONGESTION = true;
}
energy_9 = energy_9 - randomFloat(0.1, 0.2);
}


Channel_recv_1_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_1 >= random) {
Queue_1 = Queue_1 - random;
}
else {
random = Queue_1;
Queue_1 = 0;
}Channel_Buffer_1_9 = Channel_Buffer_1_9 + random;
if (Channel_Buffer_1_9 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_1_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_1_9 >= random) {
Channel_Buffer_1_9 = Channel_Buffer_1_9 - random;
}
else {
random = Channel_Buffer_1_9;
Channel_Buffer_1_9 = 0;
}Buffer_9 = Buffer_9 + random;
if (Buffer_9 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_8 = Buffer_8 + random;
if (Buffer_8 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_8_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_8 >= random) {
Queue_8 = Queue_8 - random;
}
else {
random = Queue_8;
Queue_8 = 0;
}Channel_Buffer_8_9 = Channel_Buffer_8_9 + random;
if (Channel_Buffer_8_9 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_8_9 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_8_9 >= random) {
Channel_Buffer_8_9 = Channel_Buffer_8_9 - random;
}
else {
random = Channel_Buffer_8_9;
Channel_Buffer_8_9 = 0;
}Buffer_9 = Buffer_9 + random;
if (Buffer_9 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
Buffer_5 = Buffer_5 + random;
if (Buffer_5 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_recv_9_5 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Queue_9 >= random) {
Queue_9 = Queue_9 - random;
}
else {
random = Queue_9;
Queue_9 = 0;
}Channel_Buffer_9_5 = Channel_Buffer_9_5 + random;
if (Channel_Buffer_9_5 > CHANNEL_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


Channel_send_9_5 {
int random = randomInt(CHANEL_MIN_SENDING_RATE, CHANNEL_MAX_SENDING_RATE);
if (Channel_Buffer_9_5 >= random) {
Channel_Buffer_9_5 = Channel_Buffer_9_5 - random;
}
else {
random = Channel_Buffer_9_5;
Channel_Buffer_9_5 = 0;
}Buffer_5 = Buffer_5 + random;
if (Buffer_5 > SENSOR_MAX_BUFFER_SIZE) {
CONGESTION = true;
}
}


